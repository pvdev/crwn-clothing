{"ast":null,"code":"import _toConsumableArray from \"/Users/pvessels/Dropbox/development/react-complete-dev-2019/crwn-clothing/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/pvessels/Dropbox/development/react-complete-dev-2019/crwn-clothing/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var addItemToCart = function addItemToCart(cartItems, cartItemToAdd) {\n  //check if item in cart and grab if so\n  var existingCartItem = cartItems.find(function (cartItem) {\n    return cartItem.id === cartItemToAdd.id;\n  }); //if item exist in cart, increment quantity and update property\n\n  if (existingCartItem) {\n    return cartItems.map(function (cartItem) {\n      return cartItem.id === cartItemToAdd.id ? _objectSpread({}, cartItem, {\n        quantity: cartItem.quantity + 1\n      }) : cartItem;\n    });\n  } // add quantity property on first time item added cart entry\n  // support first item in empty cart also\n\n\n  return [].concat(_toConsumableArray(cartItems), [_objectSpread({}, cartItemToAdd, {\n    quantity: 1\n  })]);\n};","map":{"version":3,"sources":["/Users/pvessels/Dropbox/development/react-complete-dev-2019/crwn-clothing/src/redux/cart/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD,EAAYC,aAAZ,EAA8B;AACzD;AACA,MAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACvB,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAAlC;AAAA,GADe,CAAzB,CAFyD,CAMzD;;AACA,MAAIH,gBAAJ,EAAsB;AACpB,WAAOF,SAAS,CAACM,GAAV,CAAc,UAAAF,QAAQ;AAAA,aAC3BA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA9B,qBACSD,QADT;AACmBG,QAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AADjD,WAEIH,QAHuB;AAAA,KAAtB,CAAP;AAKD,GAbwD,CAezD;AACA;;;AACA,sCAAWJ,SAAX,sBAA2BC,aAA3B;AAA0CM,IAAAA,QAAQ,EAAE;AAApD;AACD,CAlBM","sourcesContent":["export const addItemToCart = (cartItems, cartItemToAdd) => {\n  //check if item in cart and grab if so\n  const existingCartItem = cartItems.find(\n    cartItem => cartItem.id === cartItemToAdd.id\n  )\n\n  //if item exist in cart, increment quantity and update property\n  if (existingCartItem) {\n    return cartItems.map(cartItem =>\n      cartItem.id === cartItemToAdd.id\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\n        : cartItem\n    )\n  }\n\n  // add quantity property on first time item added cart entry\n  // support first item in empty cart also\n  return [...cartItems, { ...cartItemToAdd, quantity: 1 }]\n}\n"]},"metadata":{},"sourceType":"module"}